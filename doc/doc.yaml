openapi: 3.0.3
info:
  title: ToDo app
  description: |-
    API documentation for AMCEF ToDo project
  contact:
    email: kovac.pkovac22@gmail.com
  version: 1.0.11
tags:
  - name: Auth
    description: Authentication and authorization of the user
  - name: Lists
    description: Routes related to lists
  - name: Users
    description: List routes related to users
  - name: Items
    description: List routes related to items

paths:
  /auth/register:
    post:
      tags:
        - Auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
                password:
                  type: string
                  description: The password for the user
              required:
                - email
                - password
      responses: 
        '200': 
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
                    
        '400':
          description: Bad request due to invalid parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Invalid email or password"
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred

  /auth/login:
    post:
      tags:
        - Auth
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
                password:
                  type: string
                  description: The password for the user
              required:
                - email
                - password
      responses: 
        '200': 
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authorization token for the user
                  message:
                    type: string
                    example: Login successful
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email address or password
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred

  /auth/logout:
    post:
      tags:
        - Auth
      summary: Logout user
      operationId: logoutUser

      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to authorize the request
      responses:
        '200':
          description: User successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out

        '401':
          description: Unauthorized if the user is not logged in or token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User is not logged in or invalid token
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
  /auth/is-logged-in:
    get:
      tags:
        - Auth
      summary: Check if the user is logged in
      operationId: checkIsLoggedIn
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to check if the user is logged in
      responses:
        '200':
          description: Successfully checked if the user is logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized if the token is invalid or missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Authorization header is missing"
                required:
                  - isLoggedIn
                  - message
                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal Server Error"
                    
  /lists:
    get:
      tags:
        - Lists
      summary: Retrieve all lists
      operationId: allLists
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: false
          description: JWT token used to check if the user is logged in. If the JWT is present, retrieving lists related to the user can be retrieved.
          
      responses:
        '200':
          description: Successfull retrieval of lists
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'
         
        '500':
          description: "Internal server error"
          content: 
            application/json:
              schema:
                type: object
                properties: 
                  message:
                    type: string
                    example: "Internal server error"


    post:
      tags:
        - Lists
      summary: Create a new list
      operationId: createList
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token for user authorizaton.
      responses:
        '201':
          description: "Operation successfull"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/EmptyList'
                  
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Title must be a string
        '401':
          $ref: '#/components/responses/Unauthorized'
            
        '404':
          description: "Bad parameters"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Title must be a string"
        '500':
           $ref: '#/components/responses/InternalServerError'                    
                  
  /lists/{listId}:
    get:
      tags:
        - Lists
      summary: Retrieve a single list by ID
      operationId: getListById
      parameters:
        - in: path
          name: listId
          required: true
          example: 1
          schema:
            type: integer
          description: The ID of the list to retrieve.
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          description: |
            Optional JWT token for authorization. If provided, the response will include additional information indicating whether the user is the creator of the list.

      responses:
        '200':
          description: Successfully retrieved the list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/List'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: listId must be a string
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found"
        '500':
           $ref: '#/components/responses/InternalServerError'
                    

    put:
      tags:
        - Lists
      summary: Update the title of a list
      operationId: updateListById
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: integer
          description: The ID of the list to update.
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to authorize the user.
      requestBody:
        description: The new title for the list.
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "Updated List Title"
              required:
                - title

      responses:
        '204':
          description: Successfully updated the list
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/List'

        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Title must be a string
        '401':
          $ref: '#/components/responses/Unauthorized'

        '403':
          description: Forbidden. Only the owner of a list can change the title
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only the owner of a list can change the title of a list"
        
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found"
        '500':
           $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Lists
      summary: Delete a list
      operationId: deleteListById
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: integer
          description: The ID of the list to delete.
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to authorize the user. The user must be the creator of the list to delete it.
      responses:
        '204':
          description: Successfully deleted the list
          
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: listId must be a number      
        '401':
          $ref: '#/components/responses/Unauthorized'
          
        '403':
          description: Forbidden - Only the owner of the list can delete it
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only the owner of a list can delete it"
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found"
        '500':
           $ref: '#/components/responses/InternalServerError'
              
  /lists/{listId}/users:   
    post:
      tags:
        - Users
      summary: Add a user to a list
      operationId: addUserToList
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: integer
          description: The ID of the list to which the user will be added.
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to authorize the user.
      requestBody:
        description: The email of the user to be added to the list.
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: "user@example.com"
              required:
                - email
      responses:
        '204':
          description: Successfully added the user to the list
          
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Email must be valid  
          
        '401':
          $ref: '#/components/responses/Unauthorized'
          
        '403':
          description: Forbidden. Only the owner of the list can add users.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only the owner of a list can add users"
        '404':
          description: Not Found. The specified list or user does not exist.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found" 
        '409':
          description: User already in the list
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User is already in the list
        '500':
           $ref: '#/components/responses/InternalServerError'

  /lists/{listId}/users/{email}:
    delete:
      tags:
        - Users
      summary: Remove a user from a list
      description: Removes a user from a specified list. The user must exist and must be part of the list. Only the list owner can remove users.
      operationId: removeUserFromList
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: integer
          description: The ID of the list from which the user will be removed.
        - in: path
          name: email
          required: true
          schema:
            type: string
          description: The email of the user to be removed.
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to check if the user is logged in and authorized to perform the operation.
      responses:
        '204':
          description: Successfully removed the user from the list.
          
        '403':
          description: Forbidden. Only the owner of the list can remove users
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only the owner of a list can remove users"
          
        '401':
          $ref: '#/components/responses/Unauthorized'
          
        '404':
          description: 
            The user was not found.
            The user was not in the list.
            The list was not found.
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found, User not in list, or List not found"
                    
        '500':
           $ref: '#/components/responses/InternalServerError'

  /lists/{listId}/items:
    get:
      tags:
        - Items
      summary: Retrieve all items in a list
      operationId: getAllItemsInList
      parameters:
        - in: path
          name: listId
          required: true
          schema:
            type: integer
            example: 1
          description: The ID of the list to retrieve items from.
        - in: header
          name: Authorization
          required: false
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          description: Optional JWT token to authenticate the user and determine if they are the creator of the list.
      responses:
        '200':
          description: List of items retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "OK"
                  items:
                    type: array
                    items:
                      $ref: '#/components/schemas/Item'
        '400':
          description: Item added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "listId must be a number"
     
        '404':
          description: List not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found"
        '500':
           $ref: '#/components/responses/InternalServerError'
    post:
      summary: Add an item to a list
      operationId: addItemToList
      tags:
        - Items
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the list to which the item will be added
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          description: JWT token used to authorize the user and extract userId
      requestBody:
        description: The item object to be added to the list
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Item"
                description:
                  type: string
                  example: "Description of the new item"
                deadline:
                  type: string
                  format: date-time
                  example: "2024-09-01T15:30:00Z"
                flag:
                  type: string
                  enum:
                    - active
                    - finished
                    - aborted
                  example: "active"
                listId:
                  type: integer
                  example: 1
              required:
                - title
                - description
                - deadline
                - flag
                - listId
      responses:
        '200':
          description: Item added successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ItemResponse'
                
                    
        '400':
          description: Item added successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Missing itemId"
                    
        '403':
          description: User is not part of the list
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only a user associated with the list can add items"
                    
        '404':
          description:
            The user was not found or The list was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User not found or List not found"
                    
        '500':
           $ref: '#/components/responses/InternalServerError'
            

  /lists/{listId}/items/{itemId}:
    get:
      summary: Retrieve a single item from a list
      operationId: getItemInList
      tags:
        - Items
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the list containing the item
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            example: 42
          description: ID of the item to be retrieved
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          description: JWT token used to authorize the user
      responses:
        '200':
          description: Item retrieved successfully
          content:
            application/json:
              schema:
                  $ref: '#/components/schemas/ItemResponse'
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Title must be a string"                  

        '404':
          description: List not found, or item not found, or item does not belong to the list
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found or Item not found"
                    

        '500':
           $ref: '#/components/responses/InternalServerError'

    put:
      summary: Update an item in a list
      operationId: updateItemInList
      tags:
        - Items
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the list containing the item to be updated
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            example: 42
          description: ID of the item to be updated
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          description: JWT token used to authorize the user
      requestBody:
        description: The updated details of the item to be updated
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                itemId:
                  type: integer
                  example: 42
                title:
                  type: string
                  example: "Updated Item Title"
                description:
                  type: string
                  example: "Updated description of the item"
                deadline:
                  type: string
                  format: date-time
                  example: "2024-09-01T15:30:00Z"
                flag:
                  type: string
                  enum:
                    - active
                    - finished
                    - aborted
                  example: "active"
              required:
                - itemId
                - title
                - description
                - deadline
                - flag
      responses:
        '200':
          description: Item updated successfully
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Item'
            
                    
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Title must be a string"
                    
        '403':
          description: User is not part of the list
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User it not part of the list"                    
        '404':
          description:
            The list was not found or The item was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found or Item not found"
        '500':
           $ref: '#/components/responses/InternalServerError'

    delete:
      summary: Delete an item from a list
      operationId: deleteItemFromList
      tags:
        - Items
      parameters:
        - name: listId
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the list from which the item will be deleted
        - name: itemId
          in: path
          required: true
          schema:
            type: integer
            example: 1
          description: ID of the item to be deleted
        - name: Authorization
          in: header
          required: true
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          description: JWT token used to authorize the user
      responses:
        '204':
          description: Item deleted successfully
        '403':
          description: Only the owner of the list can delete its items
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Only the owner of a list can delete its items"
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "listId must be a number"
        '404':
          description:
            The list was not found or The item was not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "List not found or Item not found"
        '500':
           $ref: '#/components/responses/InternalServerError'


components:
  schemas:
    EmptyList:
      type: object
      properties:
        listId:
          type: integer
          example: 1
        title:
          type: string
          example: "New List"
        isCreator:
          type: boolean
        creatorEmail:
          type: string
          example: "user1@gmail.com"
        users:
          type: array
          items:
            type: string
            example: "user1@gmail.com"
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          example: []  # This shows that the array can be empty

    Item:
      type: object
      properties:
        itemId:
          type: integer
          example: 1
        title:
          type: string
          example: "Item title"
        description:
          type: string
          example: "This is item description"
        deadline:
          type: string
          format: date-time
          example: "2024-09-01T15:30:00Z"
        flag:
          type: string
          enum:
            - active
            - finished
            - aborted
          example: active
        creatorEmail:
          type: string
          example: "user1@gmail.com"

    List:
      type: object
      properties:
        listId:
          type: integer
          example: 1
        title:
          type: string
          example: "Grocery List"
        isCreator:
          type: boolean
        creatorEmail:
          type: string
          example: "user1@gmail.com"
        users:
          type: array
          items:
            type: string
            example: "user1@gmail.com"
        items:
          type: array
          items:
            $ref: '#/components/schemas/Item'
          example:
            - itemId: 1
              title: "Buy Milk"
              description: "2 liters of milk"
              deadline: "2024-09-01T15:30:00Z"
              flag: "active"
              creatorEmail: "user1@gmail.com"
            - itemId: 2
              title: "Buy Bread"
              description: "Whole grain bread"
              deadline: "2024-09-02T10:00:00Z"
              flag: "finished"
              creatorEmail: "user2@gmail.com"

    ItemResponse:
      type: object
      properties:
        itemId:
          type: integer
          example: 1
        title:
          type: string
          example: "Item title"
        description:
          type: string
          example: "This is item description"
        deadline:
          type: string
          format: date-time
          example: "2024-09-01T15:30:00Z"
        flag:
          type: string
          example: "active"
        creatorEmail:
          type: string
          example: "user1@gmail.com"
    
  responses:
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Unauthorized"
                
    InternalServerError:
      description: Internal server error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Internal server error"
                
    BadRequest:
      description: Bad request due to invalid parameters
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: "Invalid parameters"