openapi: 3.0.3
info:
  title: ToDo app
  description: |-
    API documentation for AMCEF ToDo project
  contact:
    email: kovac.pkovac22@gmail.com
  version: 1.0.11
tags:
  - name: auth
    description: Authentication and authorization of the user

paths:
  /auth/register:
    post:
      tags:
        - auth
      summary: Register a new user
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
                password:
                  type: string
                  description: The password for the user
              required:
                - email
                - password
      responses: 
        '200': 
          description: Successful registration
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User registered successfully
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email address or password
        '409':
          description: User already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User already exists
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred

  /auth/login:
    post:
      tags:
        - auth
      summary: Login user
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  description: The email address of the user
                password:
                  type: string
                  description: The password for the user
              required:
                - email
                - password
      responses: 
        '200': 
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  token:
                    type: string
                    description: Authentication token for the user
                  message:
                    type: string
                    example: Login successful
        '400':
          description: Bad parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid email address or password
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Incorrect email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: An unexpected error occurred

  /auth/logout:
    post:
      tags:
        - auth
      summary: Logout user
      operationId: logoutUser

      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to authenticate the request
      responses:
        '200':
          description: User successfully logged out
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User logged out

        '401':
          description: Unauthorized if the user is not logged in or token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User is not logged in or invalid token
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: User not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Internal Server Error
  /auth/is-logged-in:
    get:
      tags:
        - auth
      summary: Check if the user is logged in
      operationId: checkIsLoggedIn
      parameters:
        - in: header
          name: Authorization
          schema:
            type: string
            example: "Bearer <your-jwt-token>"
          required: true
          description: JWT token used to check if the user is logged in
      responses:
        '200':
          description: Successfully checked if the user is logged in
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    example: true
        '401':
          description: Unauthorized if the token is invalid or missing
          content:
            application/json:
              schema:
                type: object
                properties:
                  isLoggedIn:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: "Authorization header is missing"
                required:
                  - isLoggedIn
                  - message
                    
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Internal Server Error"